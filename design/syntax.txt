<program>       -> ( <function> | <record> )* EOF

<function>      -> "fn" IDENTIFIER "(" <parameters>? ")" ("->" <type>)? <block>
<parameters>    -> <parameter> ("," <parameter>)*
<parameter>     -> IDENTIFIER ":" <type>

<rec>        -> "rec" IDENTIFIER <"{" <rec_fields> "}">

<rec_fields>  -> <rec_field> ( <rec_field> )*
<rec_field>   -> "let" IDENTIFIER ":" <type> ";"

<block>         -> "{" <statement>* "}"
<statements>    -> <statement> ( <statement> )*

<statement>     -> <declaration>
                 | <expr_stmt>

<declaration>   -> "let" IDENTIFIER ":" <type> "=" <expression> ";"

<expr_stmt>     -> <block_expr> ";"?
                 | <blockless_expr> ";"?                                                // ; é opcional se o próximo token é } e obrigatório caso contrário

<expression>    -> <block_expr>
                 | <blockless_expr>

<block_expr>    -> <block>
                 | <if>
                 | <loop>

<if>            -> "if" <expression> <block> ("else" ( <block> | <if> ))?

<loop>          -> "for" IDENTIFIER ":" <type> "in" <expression> <block>
                 | "while" <expression> <block>

<blockless_expr> -> <attribution>
	             | "return" <expression>?
	             | "debug" <expression>
                 | "read" "(" (( <expression> ",")* <expression>)? ")"

<attribution>   -> <range> (<attrib_op> <attribution>)?                                 // associativo pela direita
<range>         -> <logic_or> (".." <logic_or>)?
<logic_or>      -> <logic_and> ( "||" <logic_and> )*
<logic_and>     -> <equality> ( "&&" <equality> )*
<equality>      -> <comparison> ( ( "!=" | "==" ) <comparison> )*
<comparison>    -> <term> ( ( ">" | ">=" | "<" | "<=" ) <term> )*
<term>          -> <factor> ( ( "-" | "+" ) <factor> )*
<factor>        -> <exponent> ( ( "*" | "/" | "%" ) <exponent> )*
<exponent>      -> <unary> ("^" <exponent>)?                                            // associativo pela direita
<unary>         -> ("!" | "-" | "#") <unary> | <call>                                   // associativo pela direita
<call>          -> <primary> ( "(" arg_list? ")" | "[" <expression> "]" | "." IDENTIFIER )*
<primary>       -> "true" | "false" | INTEGER | FLOAT | STRING | IDENTIFIER | CHAR
                 | "(" <expression> ")"
                 | <list>

<arg_list>      -> <argument> ("," <argument>)*
<argument>      -> (IDENTIFIER ":")? <expression>

<list>          -> "[" <list_items>? "]"

<list_items>      -> <expression> ("," <expression>)*

<type>          -> "[" <type> "]" | IDENTIFIER

<attrib_op>     -> "=" | "%=" | "+=" | "-=" | "*=" | "/=" | "^="